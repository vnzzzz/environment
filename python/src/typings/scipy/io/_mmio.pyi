"""
This type stub file was generated by pyright.
"""

"""
  Matrix Market I/O in Python.
  See http://math.nist.gov/MatrixMarket/formats.html
  for information about the Matrix Market format.
"""
__all__ = ['mminfo', 'mmread', 'mmwrite', 'MMFile']
def asstr(s): # -> str:
    ...

def mminfo(source):
    """
    Return size and storage parameters from Matrix Market file-like 'source'.

    Parameters
    ----------
    source : str or file-like
        Matrix Market filename (extension .mtx) or open file-like object

    Returns
    -------
    rows : int
        Number of matrix rows.
    cols : int
        Number of matrix columns.
    entries : int
        Number of non-zero entries of a sparse matrix
        or rows*cols for a dense matrix.
    format : str
        Either 'coordinate' or 'array'.
    field : str
        Either 'real', 'complex', 'pattern', or 'integer'.
    symmetry : str
        Either 'general', 'symmetric', 'skew-symmetric', or 'hermitian'.
    """
    ...

def mmread(source):
    """
    Reads the contents of a Matrix Market file-like 'source' into a matrix.

    Parameters
    ----------
    source : str or file-like
        Matrix Market filename (extensions .mtx, .mtz.gz)
        or open file-like object.

    Returns
    -------
    a : ndarray or coo_matrix
        Dense or sparse matrix depending on the matrix format in the
        Matrix Market file.
    """
    ...

def mmwrite(target, a, comment=..., field=..., precision=..., symmetry=...): # -> None:
    """
    Writes the sparse or dense array `a` to Matrix Market file-like `target`.

    Parameters
    ----------
    target : str or file-like
        Matrix Market filename (extension .mtx) or open file-like object.
    a : array like
        Sparse or dense 2-D array.
    comment : str, optional
        Comments to be prepended to the Matrix Market file.
    field : None or str, optional
        Either 'real', 'complex', 'pattern', or 'integer'.
    precision : None or int, optional
        Number of digits to display for real or complex values.
    symmetry : None or str, optional
        Either 'general', 'symmetric', 'skew-symmetric', or 'hermitian'.
        If symmetry is None the symmetry type of 'a' is determined by its
        values.
    """
    ...

class MMFile:
    __slots__ = ...
    @property
    def rows(self):
        ...
    
    @property
    def cols(self):
        ...
    
    @property
    def entries(self):
        ...
    
    @property
    def format(self):
        ...
    
    @property
    def field(self):
        ...
    
    @property
    def symmetry(self):
        ...
    
    @property
    def has_symmetry(self): # -> bool:
        ...
    
    FORMAT_COORDINATE = ...
    FORMAT_ARRAY = ...
    FORMAT_VALUES = ...
    FIELD_INTEGER = ...
    FIELD_UNSIGNED = ...
    FIELD_REAL = ...
    FIELD_COMPLEX = ...
    FIELD_PATTERN = ...
    FIELD_VALUES = ...
    SYMMETRY_GENERAL = ...
    SYMMETRY_SYMMETRIC = ...
    SYMMETRY_SKEW_SYMMETRIC = ...
    SYMMETRY_HERMITIAN = ...
    SYMMETRY_VALUES = ...
    DTYPES_BY_FIELD = ...
    @staticmethod
    def reader(): # -> None:
        ...
    
    @staticmethod
    def writer(): # -> None:
        ...
    
    @classmethod
    def info(self, source):
        """
        Return size, storage parameters from Matrix Market file-like 'source'.

        Parameters
        ----------
        source : str or file-like
            Matrix Market filename (extension .mtx) or open file-like object

        Returns
        -------
        rows : int
            Number of matrix rows.
        cols : int
            Number of matrix columns.
        entries : int
            Number of non-zero entries of a sparse matrix
            or rows*cols for a dense matrix.
        format : str
            Either 'coordinate' or 'array'.
        field : str
            Either 'real', 'complex', 'pattern', or 'integer'.
        symmetry : str
            Either 'general', 'symmetric', 'skew-symmetric', or 'hermitian'.
        """
        ...
    
    def __init__(self, **kwargs) -> None:
        ...
    
    def read(self, source):
        """
        Reads the contents of a Matrix Market file-like 'source' into a matrix.

        Parameters
        ----------
        source : str or file-like
            Matrix Market filename (extensions .mtx, .mtz.gz)
            or open file object.

        Returns
        -------
        a : ndarray or coo_matrix
            Dense or sparse matrix depending on the matrix format in the
            Matrix Market file.
        """
        ...
    
    def write(self, target, a, comment=..., field=..., precision=..., symmetry=...): # -> None:
        """
        Writes sparse or dense array `a` to Matrix Market file-like `target`.

        Parameters
        ----------
        target : str or file-like
            Matrix Market filename (extension .mtx) or open file-like object.
        a : array like
            Sparse or dense 2-D array.
        comment : str, optional
            Comments to be prepended to the Matrix Market file.
        field : None or str, optional
            Either 'real', 'complex', 'pattern', or 'integer'.
        precision : None or int, optional
            Number of digits to display for real or complex values.
        symmetry : None or str, optional
            Either 'general', 'symmetric', 'skew-symmetric', or 'hermitian'.
            If symmetry is None the symmetry type of 'a' is determined by its
            values.
        """
        ...
    


if __name__ == '__main__':
    ...
